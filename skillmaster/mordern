// Correct Answer
// Partially Correct
// Incorrect Answer
// 1
// Which of the following regular expression patterns matches any string that starts with 'abc' and ends with 'xyz'?
// Your Answer
// /^abc.*xyz$/
// Correct Answer
// /^abc.*xyz$/
// Explanation
// The regular expression pattern /^abc.xyz$/ matches any string that starts with 'abc' and ends with 'xyz' in a JavaScript regular expression. The ^ character matches the beginning of the input string, the . matches any number of characters between 'abc' and 'xyz', and the $ matches the end of the input string. The pattern /abc|xyz/ matches either 'abc' or 'xyz', while /[a-z]+/ matches any sequence of one or more lowercase letters, and /\d+/ matches any sequence of one or more digits.
// 2
// What will the code below output to the console and why?
// let max;
// const numberArray = [3, 5, 2];
// numberArray.forEach((element) => {
// if (max < element) {
// max = element;
// }
// });
// console.log(max);
// Your Answer
// 5
// Correct Answer
// undefined
// Explanation
// The variable max was not initiailized but was used in an evaluation. The evaluation will not behave as expected.
// 3
// What will be the output of the following code snippet?
// const myFunc = ({
// x,
// y,
// z
// }) => {
// console.log(x, y, z);
// };
// myFunc(1, 2, 3);
// Your Answer
// undefined undefined undefined
// Correct Answer
// undefined undefined undefined
// Explanation
// myFunc expects an object with properties x, y and z as its argument. Since we're only passing three separate numeric values (1, 2, 3) instead of one object with properties x, y and z ({x: 1, y: 2, z: 3}), x, y and z have their default value of undefined.
// 4
// What will be the output of the following code snippet?
// let numbers = [1, 2, 3];
// let doubledNumbers = numbers.map((num) =>{
// num * 2;
// });
// console.log(doubledNumbers);
// Your Answer
// [2, 4, 6]
// Correct Answer
// [undefined, undefined, undefined]
// Explanation
// Arrow functions implicitly return a value if there are no curly braces surrounding the function body. Therefore, the 'doubledNumbers' array is filled with undefined values because the return statement is missing.
// 5
// Which of the following regular expression patterns matches any non-digit character?
// Your Answer
// \D
// Correct Answer
// \D
// Explanation
// The regular expression pattern \D matches any non-digit character in a JavaScript regular expression. \w matches any word character (letters, digits, or underscore), \d matches any digit character (0-9), and \s matches any whitespace character.
// 6
// Which es6 array functions in JavaScript return a new array?
// Your Answer
// map()
// Correct Answer
// map()
// filter()
// Explanation
// map() and filter() returns new array
// 7
// Which of the following is a correct syntax for a default parameter in ES6?
// Your Answer
// function myFunction(param = value) {}
// Correct Answer
// function myFunction(param = value) {}
// Explanation
// The correct syntax for a default parameter in ES6 is using the = operator.
// 8
// What will be the output of the following code snippet?
// console.log([1, 2, 3].map(num => {
// if (typeof num === 'number') return;
// return num * 2;
// }));
// Your Answer
// [undefined, undefined, undefined]
// Correct Answer
// [undefined, undefined, undefined]
// Explanation
// When mapping over the array, the value of num is equal to the element it’s currently looping over. In this case, the elements are numbers, so the condition of the if statement typeof num === "number" returns true. The map function creates a new array and inserts the values returned from the function. However, we don’t return a value. When we don’t return a value from the function, the function returns undefined. For every element in the array, the function block gets called, so for each element we return undefined.
// 9
// Which of the following regular expression patterns matches a string that contains only lowercase letters, digits, and hyphens, and starts with a letter?
// Your Answer
// /^[a-z][a-z0-9-]$/
// Correct Answer
// /^[a-z]+[a-z0-9-]$/
// Explanation
// The regular expression pattern /^[a-z]+[a-z0-9-]*$/ matches a string that starts with a lowercase letter, followed by zero or more lowercase letters, digits, or hyphens. The other patterns do not enforce the requirement that the string starts with a letter.
// 10
// Which of the following best describes declarative code in functional programming?
// Your Answer
// Code that specifies what the result of a task should be without specifying how to get it
// Correct Answer
// Code that specifies what the result of a task should be without specifying how to get it
// Explanation
// 3
// 11
// What will be the output of the following code snippet?
// var arr = [1, 2, 3];
// var result = arr.push(4);
// console.log(result);
// Your Answer
// [1, 2, 3, 4]
// Correct Answer
// 4
// Explanation
// The code inserts a new element into the last of the given array. So the value of the result is 4.
// 12
// What will be the output of the following code snippet?
// let x = 10;

// function foo() {
// console.log(x);
// let x = 20;
// }
// foo();
// Your Answer
// 10
// Correct Answer
// ReferenceError
// Explanation
// When variables are declared using the 'let' keyword, they are block-scoped and not hoisted. Therefore, the 'x' variable inside the function is not defined at the time of the console.log() statement.
// 13
// What is a higher order function?
// Your Answer
// A function that can take a function as an argument, or that returns another function
// Correct Answer
// A function that can take a function as an argument, or that returns another function
// Explanation
// A higher order function is a function that can take another function as an argument or return another function as its result. In other words, a higher order function is a function that operates on functions.
// 14
// What will be the output of the following code snippet?
// function getAge() {
// 'use strict';
// age = 21;
// console.log(age);
// }
// getAge();
// Your Answer
// ReferenceError
// Correct Answer
// ReferenceError
// Explanation
// With "use strict", you can make sure that you don't accidentally declare global variables. We never declared the variable age, and since we use "use strict", it will throw a reference error. If we didn't use "use strict", it would have worked, since the property age would have gotten added to the global object.
// 15
// What will be the output of the following code snippet?
// let myString = "hello world";
// let [a, b, c, d, e, f, g, h, i, j, k] = myString;
// console.log(k);
// Your Answer
// "d"
// Correct Answer
// "d"
// Explanation
// In this example, the destructuring assignment extracts the 11th character of the 'myString' variable, which is "d".
// 16
// Which of the following statements about the 'this' keyword in JavaScript is true?
// Your Answer
// It refers to the global object when used in a function not defined within an object
// Correct Answer
// It refers to the object on which the method was invoked
// Explanation
// In JavaScript, the 'this' keyword refers to the object on which the method was invoked.
// 17
// What is the correct way to match a string that starts with a word character and ends with a digit?
// Your Answer
// /\w+\d/
// Correct Answer
// /\w+\d/
// Explanation
// The '+' sign ensures that the regular expression matches at least one character for both \w and \d.
// 18
// What does a return statement do inside callback function of a forEach method on an Array?
// Your Answer
// Nothing
// Correct Answer
// Nothing
// Explanation
// If you need to return a value from a loop, don’t use the forEach loop. It simply exits the current iteration of the callback and proceeds to the next iteration.
// 19
// What does the regular expression pattern /[\w.-]+@[\w.-]+.[\w.-]+/ match?
// Your Answer
// Any email address in the format username@domain.com.
// Correct Answer
// Any email address in the format username@domain.com.
// Explanation
// The regular expression pattern /[\w.-]+@[\w.-]+.[\w.-]+/ matches any email address in the format username@domain.com in a JavaScript regular expression.
// 20
// The code below returns 3?
// const arr = [1, 2];
// const reduced = arr.reduce((accumulator, element) => accumulator);
// Your Answer
// False
// Correct Answer
// False
// Explanation
// The accumulator does not use a += return. Rather, the most recent return value is stored as the accumulator. The below statement would have the desired result: const reduced = arr.reduce((accumulator, element) => accumulator + element);


// 21
// Which of the following is the correct syntax for creating a new regular expression object in JavaScript?
// Your Answer
// var regex = new RegExp(pattern, flags);
// Correct Answer
// var regex = new RegExp(pattern, flags);
// Explanation
// The correct syntax for creating a new regular expression object in JavaScript is var regex = new RegExp(pattern, flags); where 'pattern' is the regular expression pattern and 'flags' is a string containing one or more regular expression flags
// 22
// What will be the output of the following code snippet?
// function sayHi() {
// return (() => 0)();
// }
// console.log(typeof sayHi());
// Your Answer
// "number"
// Correct Answer
// "number"
// Explanation
// The sayHi function returns the returned value of the immediately invoked function expression (IIFE). This function returned 0, which is type "number".
// 23
// What will be the output of the following code snippet?
// let x = 10;

// function foo() {

// let x = 20;

// function bar() {
// console.log(x);
// }
// return bar;
// }
// let baz = foo();
// baz();
// Your Answer
// 20
// Correct Answer
// 20
// Explanation
// The 'baz' variable is assigned the 'bar' function returned by the 'foo' function, which has access to the 'x' variable defined in the outer scope of 'foo'.
// 24
// Which of the following best describes first-class objects in functional programming?
// Your Answer
// Objects that can be assigned to a variable, passed as an argument to a function, or returned as a value from a function
// Correct Answer
// Objects that can be assigned to a variable, passed as an argument to a function, or returned as a value from a function
// Explanation
// 1
// 25
// Which of the following regular expressions matches a string that starts with "http://" or "https://"?
// Your Answer
// /^(http|https):///
// Correct Answer
// /^(http|https):///
// Explanation
// The "|" operator matches either "http" or "https". The "/" is used to escape the forward slash character.
// 26
// What will be the output of the following code snippet?
// const a = [1, 2, 3];
// const b = a.map(x => x * 2).filter(x => x > 3);
// console.log(b);
// Your Answer
// [4, 6]
// Correct Answer
// [4, 6]
// Explanation
// The map() function applies a function to each element of an array and returns a new array with the results. In this case, the function multiplies each element by 2, resulting in [2, 4, 6]. The filter() function creates a new array with all elements that pass the test implemented by the provided function. In this case, the function filters out all elements less than or equal to 3, resulting in [4, 6].
// 27
// RegExp do not have any properties.
// Your Answer
// True
// Correct Answer
// False
// Explanation
// RegExps have many properties, such as .flags and .global.
// 28
// What will be the output of the following code snippet?
// const a = [1, 2, 3];
// const b = a.map(x => x * x).reduce((acc, x) => acc + x, 0);
// console.log(b);
// Your Answer
// 14
// Correct Answer
// 14
// Explanation
// The code uses the map() method to create a new array a by squaring each element of the original array [1, 2, 3]. This results in a new array [1, 4, 9]. Then, the reduce() method is called on this new array, which sums all the elements of the array to produce a final result. In this case, the initial value of the accumulator acc is set to 0. So, the result of the reduce() method is: 0 + 1 + 4 + 9 = 14. Finally, the console.log() statement outputs the value of b, which is 14.
// 29
// Which of the following is a benefit of functional programming?
// Your Answer
// Greater use of side effects to simplify program logic
// Correct Answer
// Simpler code that is easier to debug and test
// Explanation
// Functional programming emphasizes immutable data and pure functions, which reduces complexity and makes code easier to reason about, debug, and test.
// 30
// Which of the following regular expressions matches a string that contains at least one digit?
// Your Answer
// /^[0-9]+$/
// Correct Answer
// none of the above
// Explanation
// None of the provided regular expressions match a string containing at least one digit anywhere within the string; they all impose conditions on the entirety of the string rather than ensuring at least one digit is present. Thus, none of them fulfill the given requirement.
// 31
// How cae invoke sum in sum.js from index.js?
// // sum.js
// export default function sum(x) {
// return x + x;
// }
// // index.js
// import * as sum from './sum';
// Your Answer
// sum.default(4)
// Correct Answer
// sum.default(4)
// Explanation
// With the asterisk *, we import all exported values from that file, both default and named. If we had the following file: // info.js export const name = 'Lydia'; export const age = 21; export default 'I love JavaScript'; // index.js import * as info from './info'; console.log(info); The following would get logged: { default: "I love JavaScript", name: "Lydia", age: 21 } For the sum example, it means that the imported value sum looks like this: { default: function sum(x) { return x + x } } We can invoke this function, by calling sum.default
// 32
// What will be the output of the following code snippet?
// const {
// name: myName
// } = {
// name: 'Lydia'
// };
// console.log(name);
// Your Answer
// ReferenceError
// Correct Answer
// ReferenceError
// Explanation
// When we unpack the property name from the object on the right-hand side, we assign its value "Lydia" to a variable with the name myName.With { name: myName }, we tell JavaScript that we want to create a new variable called myName with the value of the name property on the right-hand side. Since we try to log name, a variable that is not defined, a ReferenceError gets thrown.
// 33
// Will the following JavaScript code work?
// var tensquared = (function(x) {
// return x * x;
// }(10));
// Your Answer
// Yes, perfectly
// Correct Answer
// Yes, perfectly
// Explanation
// Function name is optional for functions defined as expressions. Function expressions are sometimes defined and immediately invoked.
// 34
// What does the "debugger" statement do in JavaScript?
// Your Answer
// prints a message to the console for debugging
// Correct Answer
// inserts a breakpoint in the code for debugging
// Explanation
// The "debugger" statement can be used to pause the execution of JavaScript code and allow for debugging in the browser's developer tools.
// 35
// What will be the output of the following code snippet?
// console.log([ [0, 1],
// [2, 3]
// ].reduce((acc, cur) => {
// return acc.concat(cur);
// }, [1, 2], ));
// Your Answer
// [1, 2, 0, 1, 2, 3]
// Correct Answer
// [1, 2, 0, 1, 2, 3]
// Explanation
// [1, 2] is our initial value. This is the value we start with, and the value of the very first acc. During the first round, acc is [1,2], and cur is [0, 1]. We concatenate them, which results in [1, 2, 0, 1]. Then, [1, 2, 0, 1] is acc and [2, 3] is cur. We concatenate them, and get [1, 2, 0, 1, 2, 3]
// 36
// Which of the following is a correct way to define a private property in a class in ES6?
// Your Answer
// this.#myProp = value;
// Correct Answer
// this.#myProp = value;
// Explanation
// The '#' symbol can be used to define private properties in classes in ES6.
// 37
// Which of the following regular expression patterns matches a string that contains at least one uppercase letter, one lowercase letter, and one digit?
// Your Answer
// /[a-zA-Z0-9]/
// Correct Answer
// /\d[a-z][A-Z]/
// Explanation
// The regular expression pattern /^(?=.\d)(?=.[a-z])(?=.[A-Z]).$/ matches a string that contains at least one digit, one lowercase letter, and one uppercase letter in any order. The other patterns do not provide a comprehensive way of matching all three criteria.
// 38
// What is the purpose of the for...of loop in ES6?
// Your Answer
// To iterate over the values of an array
// Correct Answer
// To iterate over the values of an array
// Explanation
// The for...of loop is used to iterate over the values of an array.
// 39
// Use RegExp literal notation when the RegExp will be changing and use the RegExp constructor function when the RegExp will remain constant.
// Your Answer
// True
// Correct Answer
// False
// Explanation
// This is the opposite of how to use them: Use RegExp constructor function notation when the RegExp will be changing and use the RegExp literal notation when the RegExp will remain constant.
// 40
// What will be the output of the following code snippet?
// const a = [1, 2, 3];
// const b = a.reduce((acc, x) => acc.concat([x * x]), []);
// console.log(b);
// Your Answer
// [1, 4, 9]
// Correct Answer
// [1, 4, 9]
// Explanation
// The reduce() function applies a function to each element of an array and accumulates the results into a single value. In this case, the function squares each element of the array and concatenates the result to the accumulator, resulting in [1, 4, 9].
// Page 2 of 2